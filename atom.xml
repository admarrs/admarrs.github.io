<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Autonomous Engineer</title>
  <link href="https://admarrs.github.io/atom.xml" rel="self"/>
  <link href="https://admarrs.github.io/"/>
  <updated>2022-04-20T06:10:48+00:00</updated>
  <id>https://admarrs.github.io/</id>
  <author>
    <name>Alan Marrs</name>
  </author>
  <entry>
    <id>https://admarrs.github.io/on-engineering-onboarding.html</id>
    <link href="https://admarrs.github.io/on-engineering-onboarding.html"/>
    <title>On Engineering Onboarding</title>
    <updated>2022-04-09T23:59:59+00:00</updated>
    <content type="html">
      <![CDATA[<p>Good onboarding of new engineers can have a huge impact on company success. Creating a good onboarding process doesn’t have to be onerous.</p><p>Having recently excited a large corporate and joined a scaling startup I was impressed by the their general onboarding program when compared to corporate my experience 10 years ago. The engineering specific onboarding still needed work. As the new Chief Engineer now fell to me to develop those modules.</p><p>The main goal of engineering onboarding is to ensure a newly hired engineer can become a proficient contributor as quickly as possible. Casting around to get a view on best practice you’ll no doubt stumble upon <a href='https://lethain.com/thesis-engineering-onboarding-products/'>Will Larson’s</a> post on developing products for the engineering onboarding space.  What I found interesting about this post was its focus on what makes onboarding an interesting problem - in essence it’s difficult to measure how effective an onboarding process is - and how a product addressing this space might demonstrate value. All good stuff but not really helpful in underlining best practice.</p><p>So how does an engineer become effective? Through having a clear view of the engineering teams goals in the context of the wider business goals, where the team they are joining sits within the organisation and how that team conducts its engineering business. With that in mind I suggest the following artefacts may be useful tools:</p><ul><li>Product, team and project map<ul><li>what are our core products and which markets do they serve,</li><li>which teams work on them ,</li><li>which projects are active - “you are here”.</li></ul></li><li>Company and team workflow documents<ul><li>Who are to goto people for key engineering issues,</li><li>Software process - standards, PRs and code reviews,</li><li>Systems engineering process (if appropriate) - requirements management, system design and decomposition, test and verification, how traceability is maintained.</li></ul></li></ul>]]>
    </content>
  </entry>
</feed>
